* phoebe
:PROPERTIES:
:CUSTOM_ID: phoebe
:END:

Phoebe is an experimental programming language built with Haskell.  A
dynamically typed language with a simple syntax based on the
specification by [[https://www.cl.cam.ac.uk/archive/mjcg/][Michael J.C. Gordon]]'s book [[https://link.springer.com/book/10.1007/978-1-4612-6228-2][The Denotational
Description of Programming Languages]]

** Features
:PROPERTIES:
:CUSTOM_ID: features
:END:

  - [X] Control Structures (if-then-else, whiledo)
  - [X] Blocks with multi-expressions
  - [X] Functions (Call by ref/value)
  - [X] Dynamic/Static binding
  - [X] Escapes and Jumps
  - [X] Data structures
  - [X] Iteration constructs
  - [X] Interprets a File
  - [X] Regression tests


** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:

*** Basic Program Structure
:PROPERTIES:
:CUSTOM_ID: basic-program-structure
:END:
#+BEGIN_SRC pascal
  program
  begin
    proc print(str) -> output str;
    print("Hello Pheobe")
  end
#+END_SRC

Output: =Result: [Str "Hello Pheobe"]=

*** Functions and Procedures
:PROPERTIES:
:CUSTOM_ID: functions-and-procedures
:END:
#+BEGIN_SRC pascal
  program
  begin
    fun add(x, y) -> x + y;
    var result = add!(5, 3);
    output result
  end
#+END_SRC

Output: =Result: [Numeric 8]=

*** Control Structures
:PROPERTIES:
:CUSTOM_ID: control-structures
:END:
#+BEGIN_SRC pascal
  program
  begin
    var x = 10;
    if x > 5 then
      output x
    else
      output 0
  end
#+END_SRC

Output: =Result: [Numeric 10]=

*** Arrays
:PROPERTIES:
:CUSTOM_ID: arrays
:END:

#+begin_src pascal
  program
  begin
    array arr[0:5];
    arr[0] := 1;
    arr[1] := 2;
    output arr
  end
#+end_src

Output: =Result: [Str "{0: Numeric 1, 1: Numeric 2, 2: Error \"Unassigned\", 3: Error \"Unassigned\", 4: Error \"Unassigned\", 5: Error \"Unassigned\"}"]=

*** Records
:PROPERTIES:
:CUSTOM_ID: records
:END:

#+begin_src pascal
  program
  begin
     record cats(loki, phoebe);
     cats.loki := 5;
     cats.phoebe := 3;
     output cats
  end
#+end_src

Output: =Result: [Str "{loki: Numeric 5, phoebe: Numeric 3}"]=


** Development
:PROPERTIES:
:CUSTOM_ID: development
:END:

Run the interpreter in GHCi.

#+BEGIN_SRC sh
  make interpreter
#+END_SRC

Example:
#+BEGIN_sh sh
  make interpreter
  ghci> run "program begin var x = 10; output x + read end" [Numeric 1]
  Result: [Numeric 11]
#+END_SRC


Run the following command to build the project. The executable will be
available in the `dist` directory.

#+BEGIN_SRC sh
    make build
#+END_SRC

Run tests

#+BEGIN_SRC sh
  make test
#+END_SRC
